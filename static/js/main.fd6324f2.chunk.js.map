{"version":3,"sources":["serviceWorker.js","stars/index.js","index.js","helpers.js","controls/index.ts"],"names":["Boolean","window","location","hostname","match","PubSub","subscribe","msg","_ref","scene","starsGeometry","THREE","i","star","x","randFloatSpread","Math","random","y","z","vertices","push","starsMaterial","color","stars","publish","add","__webpack_require__","d","__webpack_exports__","CONFIG","DEFAULTS","DATA","isTouchDevice","prefixes","split","DocumentTouch","document","query","matchMedia","matches","mq","join","postprocessing","antialias","sizeRatio","aspectRatio","innerWidth","innerHeight","CPUCores","navigator","hardwareConcurrency","undefined","xwing","trench","orbitControls","STATE","leftIsDown","upIsDown","rightIsDown","downIsDown","ctrlIsDown","spaceIsDown","inFullscreen","GLTFLoader","load","gltf","xhr","console","log","loaded","total","error","camera","position","renderer","setSize","body","appendChild","domElement","setPixelRatio","devicePixelRatio","gammaInput","gammaOutput","spotLight","set","target","castShadow","shadow","near","far","ambientLight","Stats","data","state","oldTime","mouseXpercent","mouseYpercent","addEventListener","event","key","WindowResize","animate","requestAnimationFrame","render","time","Date","getTime","delta","optimalDivider","smoothing","max","toY","difX","difY","min","rotation","PI","loop","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd6324f2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as THREE from 'three/build/three.module.js';\nimport PubSub from 'pubsub-js';\n\nPubSub.subscribe('main.initialized', (msg, { scene }) => {\n  const starsGeometry = new THREE.Geometry();\n\n  for (let i = 0; i < 10000; i++) {\n    const star = new THREE.Vector3();\n    star.x = THREE.Math.randFloatSpread(Math.random() * 100000);\n    star.y = THREE.Math.randFloatSpread(Math.random() * 10000);\n    star.z = THREE.Math.randFloatSpread(Math.random() * 20000);\n    starsGeometry.vertices.push(star);\n  }\n\n  const starsMaterial = new THREE.PointsMaterial({ color: 0x888888 });\n  const stars = new THREE.Points(starsGeometry, starsMaterial);\n\n  PubSub.publish('stars.loaded', {\n    stars\n  });\n\n  scene.add(stars)\n});\n","import * as THREE from 'three/build/three.module.js';\nimport WindowResize from 'threejs-window-resize';\nimport OrbitControlsFactory from 'three-orbit-controls';\nimport PubSub from 'pubsub-js';\nimport Stats from 'stats.js'\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { KeyboardControls, TouchControls } from './controls';\nimport { isTouchDevice } from './helpers';\nimport GLTFLoader from 'three-gltf-loader'\nimport './stars'\n\n// These CANNOT be overriden\nexport const CONFIG = {\n  isTouchDevice: isTouchDevice()\n};\n\n// These can be overriden\nexport const DEFAULTS = {\n  postprocessing: !CONFIG.isTouchDevice,\n  antialias: !CONFIG.isTouchDevice,\n  sizeRatio: CONFIG.isTouchDevice ? 3 : 1,\n  aspectRatio: window.innerWidth / window.innerHeight,\n  CPUCores: navigator.hardwareConcurrency\n};\n\nexport const DATA = {\n  stars: undefined,\n  xwing: undefined,\n  trench: undefined,\n  orbitControls: undefined\n};\n\nconst STATE = {\n  leftIsDown: false,\n  upIsDown: false,\n  rightIsDown: false,\n  downIsDown: false,\n  ctrlIsDown: false,\n  spaceIsDown: false,\n  inFullscreen: false\n}\n\n// Instantiate a loader\nconst loader = new GLTFLoader();\n\n// Load a glTF resource\nloader.load(\n\t// resource URL\n\t'/models/xwing/scene.gltf',\n\t// called when the resource is loaded\n\tfunction (gltf) {\n    PubSub.publish('models.xwing.loaded', {\n      gltf\n    });\n\t},\n\t// called while loading is progressing\n\tfunction ( xhr ) {\n    console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );\n    PubSub.publish('models.xwing.loading', {\n      xhr\n    });\n\t},\n\t// called when loading has errors\n\tfunction ( error ) {\n\t\tconsole.log( 'An error happened' );\n\t}\n);\n\n// Scene\nconst scene = new THREE.Scene();\n// scene.fog = new THREE.Fog(0x000000, 20000, 25000);\n\n// Camera\n// @TODO: Change depth of field to improve perf on low end devices\nconst camera = new THREE.PerspectiveCamera(75, DEFAULTS.aspectRatio, 0.1, 5000);\n\ncamera.position.x = 0;\ncamera.position.y = 0;\ncamera.position.z = 30;\n\n// Renderer\nconst renderer = new THREE.WebGLRenderer({\n  antialias: DEFAULTS.antialias,\n});\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\nrenderer.setPixelRatio(window.devicePixelRatio);\n\n// Shadow\n// renderer.shadowMap.enabled = true;\n// renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n// renderer.shadowMapBias = 0.0039;\n// renderer.shadowMapDarkness = 0.5;\n// renderer.shadowMapWidth = 1024 / (DEFAULTS.aspectRatio * 2);\n// renderer.shadowMapHeight = 1024 / (DEFAULTS.aspectRatio * 2);\n// renderer.shadowMapEnabled = true;\n// renderer.shadowMapSoft = true;\n// renderer.shadowCameraNear = 1;\n// renderer.shadowCameraFar = 100000;\n// renderer.shadowCameraFov = 50;\n\n// Gamma\nrenderer.gammaInput = true;\nrenderer.gammaOutput = true;\n\n// Lights\nconst spotLight = new THREE.SpotLight(0xffffff);\nspotLight.position.set(100, 1000, 100);\nspotLight.target.position.set(0, 0, 0);\nspotLight.castShadow = true;\nspotLight.shadow.camera.near = 50;\nspotLight.shadow.camera.far = 150;\nscene.add(spotLight);\nconst ambientLight = new THREE.AmbientLight(0x111111, 0.6);\nscene.add(ambientLight);\n\n// Stats\nconst stats = new Stats();\nif (process.env.NODE_ENV === 'development') {\n  document.body.appendChild(stats.dom);\n}\n\n// Models\nPubSub.subscribe('models.xwing.loaded', (msg, data) => {\n  DATA.xwing = data.gltf.scene;\n  // const boxGeometry = new THREE.BoxGeometry(5, 5, 5);\n  // const material = new THREE.MeshNormalMaterial({\n  //   color: 'red'\n  // })\n  // DATA.xwing = new THREE.Mesh(boxGeometry, material);\n  scene.add(DATA.xwing);\n});\nPubSub.publish('main.load.models.xwing', {});\n\n// Development Tools\nif (process.env.NODE_ENV === 'development') {\n  // Orbit controls\n  // const OrbitControls = OrbitControlsFactory(THREE);\n  // DATA.orbitControls = new OrbitControls(camera, renderer.domElement);\n  // Axes helper\n  const axesHelper = new THREE.AxesHelper(500);\n  scene.add(axesHelper);\n  // Spotlight helper\n  const spotLightHelper = new THREE.SpotLightHelper(spotLight);\n  scene.add(spotLightHelper);\n}\n\n// Stars\nPubSub.subscribe('stars.loaded', (msg, data) => {\n  DATA.stars = data.stars\n  DATA.stars.position.y = 500\n  scene.add(DATA.stars);\n});\n\n// Render loop\nfunction animate() {\n  requestAnimationFrame(animate);\n  renderer.render(scene, camera);\n  loop();\n}\n\nlet oldTime = 0;\nlet mouseXpercent = 0;\nlet mouseYpercent = 0;\n\n// Controls\nCONFIG.isTouchDevice ? TouchControls() : KeyboardControls(STATE);\n\n// Render loop\nfunction loop() {\n  let time = new Date().getTime();\n  CONFIG.delta = time - oldTime;\n  oldTime = time;\n\n  if (CONFIG.delta > 1000 || CONFIG.delta === 0) {\n    CONFIG.delta = 1000 / 60;\n  }\n\n  if (process.env.NODE_ENV === 'development' && DATA.orbitControls) {\n    DATA.orbitControls.update();\n  }\n\n  if (!DATA.xwing) { return; }\n\n  const optimalDivider = CONFIG.delta / 16;\n  const smoothing = Math.max(8, 12 / optimalDivider);\n  let toX = mouseXpercent * 100;\n  let toY = mouseYpercent * 50;\n\n  // if (sideWays.state) {\n  //   toX = mouseXpercent * 480;\n  //   toY = -(mouseYpercent * 250);\n  // }\n\n  let difX = (toX - DATA.xwing.position.x) / smoothing;\n  let difY = (toY - DATA.xwing.position.y) / smoothing;\n\n  DATA.xwing.position.x += difX;\n  DATA.xwing.position.y += difY;\n\n  difX = Math.min(difX, 20);\n  difX = Math.max(difX, -20);\n  difY = Math.min(difY, 20);\n  difY = Math.max(difY, -20);\n\n  DATA.xwing.rotation.x = difY / 30;\n  DATA.xwing.rotation.y = -(difX / 30) + Math.PI;\n  DATA.xwing.rotation.z = (difX / 30);\n  // xwing.rotation.z += sideWays.rotation;\n\n  if (STATE.leftIsDown) { mouseXpercent -= 0.003 * CONFIG.delta; }\n  if (STATE.rightIsDown) { mouseXpercent += 0.003 * CONFIG.delta; }\n  if (STATE.upIsDown) { mouseYpercent += 0.003 * CONFIG.delta; }\n  if (STATE.downIsDown) { mouseYpercent -= 0.003 * CONFIG.delta; }\n  if (mouseXpercent < -1) mouseXpercent = -1;\n  if (mouseXpercent > 1) mouseXpercent = 1;\n  if (mouseYpercent < -1) mouseYpercent = -1;\n  if (mouseYpercent > 1) mouseYpercent = 1;\n\n  camera.position.x = DATA.xwing.position.x;\n  camera.position.y = DATA.xwing.position.y;\n\n  // @TODO\n  // if (DEFAULTS.postprocessing) {\n  //   composer.render(delta);\n  // }\n  if (process.env.NODE_ENV === 'development') { stats.update(); }\n}\n\n\n// Render buttons to initiate user interaction for sound\n// function WelcomePrompt() {\n//   return (\n//     <button onClick={() => PubSub.publish('welcome-screen.button.clicked')}>Click to play</button>\n//   );\n// }\n// ReactDOM.render(<WelcomePrompt />, document.getElementById('root'));\n\nWindowResize(renderer, camera);\nanimate();\n\nPubSub.publish('main.initialized', {\n  camera,\n  scene\n});\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/* eslint no-undef: off */\nexport function isTouchDevice() {\n  const prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');\n  const mq = function(query) {\n    return window.matchMedia(query).matches;\n  };\n\n  if (\n    'ontouchstart' in window ||\n    (window.DocumentTouch && document instanceof DocumentTouch)\n  ) {\n    return true;\n  }\n\n  // include the 'heartz' as a way to have a non matching MQ to help terminate the join\n  // https://git.io/vznFH\n  const query = ['(', prefixes.join('touch-enabled),('), 'heartz', ')'].join(\n    ''\n  );\n  return mq(query);\n}\n","export function KeyboardControls(state) {\n  // document.addEventListener('mousemove', onDocumentMouseMove);\n  // document.addEventListener('mousedown', onDocumentMouseDown);\n  // document.addEventListener('mouseup', onDocumentMouseUp);\n\n  document.addEventListener('keyup', (event) => {\n    switch (event.key) {\n      case 'ArrowLeft':\n        state.leftIsDown = false;\n        break;\n      case 'ArrowUp':\n        state.upIsDown = false;\n        break;\n      case 'ArrowRight':\n        state.rightIsDown = false;\n        break;\n      case 'ArrowDown':\n        state.downIsDown = false;\n        break;\n      case 'Control':\n        state.ctrlIsDown = false;\n        break;\n      case 'Space':\n        state.spaceIsDown = false;\n        break;\n    }\n  });\n\n  document.addEventListener('keydown', (event) => {\n    switch (event.key) {\n      case 'ArrowLeft':\n        state.leftIsDown = true;\n        break;\n      case 'ArrowUp':\n        state.upIsDown = true;\n        break;\n      case 'ArrowRight':\n        state.rightIsDown = true;\n        break;\n      case 'ArrowDown':\n        state.downIsDown = true;\n        break;\n      case 'Control':\n        state.ctrlIsDown = true;\n        break;\n      case 'Space':\n        state.spaceIsDown = true;\n        break;\n    }\n  });\n}\n\n// @TODO\nexport function TouchControls() {\n  // document.addEventListener('touchstart', onTouchStart);\n  // document.addEventListener('touchmove', onTouchMove);\n  // document.addEventListener('touchend', onTouchEnd);\n}\n"],"sourceRoot":""}